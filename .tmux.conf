# TODO: Clean this up.

# Meta. {{{
## prefix-r reloads the configuration.
bind-key r source-file ~/.tmux.conf\; display-message "source-file done"
## Set the prefix key to C-u.
set-option -g prefix C-u
unbind-key C-b
## Press the prefix key twice to send the prefix key once in the inner level.
bind-key C-u send-prefix
## Don't wait for more input after an escape key is pressed for meta-key
## combinations.  Unit: ms.  (Default value: 500.)
set-option -g escape-time 0
# }}}

# System. {{{
## Work properly with linux-based systems for irssi.
set-window-option -g xterm-keys on

## Bell / beep / alert configuration.
### Enable terminal bell.
set-option -g bell-on-alert on
### In "any" window, not just in "other" windows or in the "current" window.
### (Also supported: "none".)
set-option -g bell-action any
### Don't replace passing a bell through to the terminal with a message.
set-option -g visual-bell off

# (I copied this from an earlier configuration of mine.  TODO: clean up
# documentation.)
# Thanks http://sourceforge.net/p/tmux/mailman/message/27366130/ !
# (from http://stackoverflow.com/a/16096325)
# This is my much simpler solution than that suggested by
# http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/FAQ :D
#
#
#
# man 5 terminfo
#
# search for italics
#
# search for standout
#
#
# Aha.
#
#
# infocmp xterm-16color screen-16color | egrep -i 'smso|sitm'
#
# :D
#set-option -g terminal-overrides "*:colors=16,smso=\e[7m,sitm=\e[3m"
set-option -g terminal-overrides "*:colors=256,smso=\e[7m,sitm=\e[3m"
# }}}

# Appearance. {{{
## Enable status bar.  (TODO: this setting may need to be removed for your
## window management configuration.)
set-option status on
## Duration of messages, in ms.  Default: 750.
set-option -g display-time 750
# }}}

# Navigation and input. {{{
## New windows start at 1, closer to the beginning of the keyboard.
set-option -g base-index 1

## Use vi-mode for copy and paste.
setw -g mode-keys vi

## Automatically renumber windows when one is closed.
## This prevents gaps in indices, and prevents new windows from appearing in
## unexpected locations.
set-option -g renumber-windows on

## TODO: '=' was originally bound to choose-buffer.
## TODO: can a key be bound to toggle this option?
bind-key = set -g synchronize-panes
# }}}

# Window management. {{{
## Configuration to allow the selection of an "active" window management layer
## of tmux sessions, up to the application.
##
## This is similar to a mode, and affects window management key-bindings.  This
## affects TODO, and window management keybindings.  At the innermost level,
## they can be used for applications such as vim.
##
## Window management navigation in this configuration is divided into several
## categories.
##
## Window-like navigation generally includes 3 management operations and 4
## movement operations: a binding to split vertically, a binding to split
## horizontally, and a binding to close; as well as as a binding to move focus
## to the right, up, left, and down.  Particular instances of this might add
## slight variations; e.g. the type of navigation might add swap bindings for
## each movement operation.  But based on what is common and thus what is
## useful in a definition, this category description by default lacks these.
##
## Tab-like navigation generally has 2 management operations, one to open and
## one to close, 2 movement operations horizontally, to move left and to move
## right, and 2 movement operations that swap horizontally, swapping the
## currently focused element with the one to the left and to the right.  Again,
## variants may exist; this exists mostly as a useful basis to help model
## systems of window management and navigation.
##
## We're here concerned with at least the following types of movement:
##   1) tmux client focus selection: Vertical tab-like navigation with only the
##      focus movement operations
##   2) tmux window selection: tab-like navigation.  (Note: this configuration
##      also adds an open operation that opens a new window at the end of the
##      list, rather than to the right, which this configuration implements as
##      the default, contrary to an unconfigured tmux configuration's default.
##   3) tmux pane selection: window-like navigation.
##   4) vim's buffers: tab-like navigation.
##   5) vim's tabs: tab-like navigation.
##   6) vim's windows: window-like navigation.
##   7) Also, what about xmonad navigation?
##
## That's at least 7 types of window management we want to support!
##
## (TODO: revise to something convenient.)
##
## 1) M-j and M-k (alt-j and alt-k) serve this function; both keybindings can
##    also be preceded by the tmux prefix key.  Pressing prefix TODO
##    will require the prefix key to be pressed before subsequent M-j or M-k
##    keypresses will take effect.
##
##    TODO: or alternatively, pressing prefix-TODO toggles whether or not the
##    prefix key is required for tmux layer focus selection.  But should this
##    mode be automatically enabled or disabled when the innermost application
##    layer acquire focus?
##
##    TODO: OR, there could always be one "selected" tmux window, but a key to
##    toggle whether or not the application or the selected tmux window has
##    focus and receives certain inputs.
##
##    TODO: I think some mechanism to toggle between a tmux layer and the
##    application layer would be ideal.  It should be convenient for frequent
##    use.
##
## 2) M-h and M-l move focus left and right, and M-H and M-L (with shift) swap
##    the currently focused element with the one to the left and to the right.
##
##    M-c opens a new window.  There is no binding for M-x to close a window
##    for tmux, because normally when hard-killing a window is preferred to
##    ending e.g. the shell cleanly, confirmation usually should be required;
##    this prevents inordinately frequently accidentally killing a window in
##    tmux.  Thus, so as to not inappropriately forward M-x when a tmux layer
##    is focused, it is bound to a display-message that closing a tmux window
##    requires manual confirmation with prefix-&.
##
## 3) Tmux's pane movement is handled with M-C-{j,k,h,l}, with the control key.
##    Closing a pane is done with M-C-q (TODO: just M-q?), and splitting
##    is done horizontally with M-C-?? and vertically with M-C-?? (TODO)
##
## 4) Vim's buffers: M-j and M-k serve as :bn and :bn, respectively.
##
## 5) Vim's tabs: M-h and M-l serve as :tabprev and :tabnext, respectively.
##    M-c opens a new tab, and M-x closes a tab.  M-H and M-L swaps tabs in
##    specially configured vim with the tab to the left and the tab to right,
##    in the configuration in in this repository.
##
## 6) Vim's windows: focus is moved with M-C-{j,k,h,l}.  Closing a window is
##    done with TODO, and splitting is done horizontally with TODO and
##    vertically with TODO.
##
## 7)
##
## TODO: M-u is the prefix key for the currently highlighted window.

## 1) Change focus in tmux windows: M-j and M-k.
#bind-key

# }}}

# History and buffer sizes. {{{
## Number of messages to remember in the message log, viewable by PREFIX-~ .
set-option -g message-limit 64

## Number of lines to remember per window buffer.
set-option -g history-limit 10000
# }}}

# vim:foldmethod=marker:foldlevel=0 tw=79 noet







# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
# TEMPORARY TMUX CONFIGURATION WHILE CURRENT ONE IS IN DEVELOPMENT IN DOT-FILES REPO
#bind-key r source-file ~/.tmux.conf
##bind-key R if-shell '[[ -f ./.tmux.conf ]]' "source-file ~/.tmux.conf; display-message \"sourced #[fg=red]local#[default] file: ./.tmux.conf\"" "source-file ~/.tmux.conf; display-message \"sourced home configuration: ~/.tmux.conf\""
#unbind-key R

# # # #set-option -g base-index 1

# Number of messages to remember in the message log, viewable by PREFIX-~ .
set-option -g message-limit 64

set-option -g status-left "#[fg=green][#[fg=green,bright]#S#[fg=green]]#[default] #[fg=red](#(hostname))"
set-option -g status-left-length 10

# Default: 750
#set-option -g display-time 750
# Display multiple messages:
# display-message foo; run-shell 'sleep $(tmux show-options -v )'; 

set-option -g prefix C-u
unbind-key C-b
bind-key C-u send-prefix

set-option -g status-bg blue
# # # #set-option -g status on

#set -g default-terminal "screen-256color"
#set -g default-terminal "xterm"
#set -g default-terminal "xterm"
# # # #set-window-option -g xterm-keys on
#set -g default-terminal "xterm-256color"
# http://unix.stackexchange.com/questions/1045/getting-256-colors-to-work-in-tmux
#set -g default-terminal "screen-256color"
#set -g default-terminal "screen-16color
# # # #set -g default-terminal "screen-256color"
#set -g utf8 on
#set -g status-utf8 on

# TODO: append!
# Thanks http://sourceforge.net/p/tmux/mailman/message/27366130/ !
# (from http://stackoverflow.com/a/16096325)
# This is my much simpler solution than that suggested by
# http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/FAQ :D
#
#
#
# man 5 terminfo
#
# search for italics
#
# search for standout
#
#
# Aha.
#
#
# infocmp xterm-16color screen-16color | egrep -i 'smso|sitm'
#
# :D
#set-option -g terminal-overrides "*:colors=16,smso=\e[7m,sitm=\e[3m"
# # # #set-option -g terminal-overrides "*:colors=256,smso=\e[7m,sitm=\e[3m"

# # # #bind-key a send-prefix

# # # #setw -g mode-keys vi

bind-key c new-window -c "#{pane_current_path}"

#set-option -g history-limit 1000
#set -g history-size 20000000
# # # #set-option -g history-limit 10000

# # # #set-option -g renumber-windows on

# # # #set-option -g escape-time 0
# # # #set-option -g escape-time 0

set-option -g bell-on-alert on
set-option -g bell-action any
# Preferably visual bell would be both on and off, but I haven't yet figured out how.
set-option -g visual-bell off

set-window-option -g automatic-rename on
# # # #set-option -g set-titles on

# TODO: figure out how to manage conflicts and existing windows
# M-t, then type number and enter to set current window number.
#bind-key -n M-t command-prompt -I "Window #" "swap-window -t"
# Meh, you'd need a shell script.
#bind-key -n M-t command-prompt -I "New window #: " "move-window -t %1; move-window -%2"

# # # #bind-key y set-window synchronize-panes on
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
set-option -g base-index 1
bind-key Y set-window synchronize-panes off

# Window creation and deletion
bind-key -n M-c new-window -a -c "#{pane_current_path}"
##bind-key -n M-c new-window -a
#bind-key -n M-c run-shell 'tmux-new-window-workaround'
##bind-key -n M-c run-shell "tmux new-window -a 'zsh -ils eval \"from-tmux nw \\\"#{pane-id}\\\" \\\"#{pane-index}\\\" \\\"#{pane-pid}\\\" \\\"#{pane-tty}\\\" \\\"#{session-id}\\\" \\\"#{session-name}\\\" \\\"#{window-id}\\\" \\\"#{window-index}\\\" \\\"#{window-name}\\\" \\\"#{client-session}\\\" \\\"#{client-termname}\\\" \\\"#{client-last-session}\\\" \\\"#{host}\\\" \\\"#{host-short}\\\"\"'"
bind-key -n M-C new-window

# Session navigation
bind-key -n M-s     choose-tree
bind-key -n 'C-M-n' switch-client -n
bind-key -n 'C-M-p' switch-client -p
# FIXME: 'C-M-`' isn't being recognized.
#bind-key -n 'C-M-`' switch-client -l

# Window navigation
bind-key -n M-n   next-window
bind-key -n M-d   previous-window
bind-key -n 'M-`' last-window

#bind-key -n M-C-n next-window
#bind-key -n M-C-d previous-window


bind-key -n 'M-!' select-window -t ':^'
bind-key -n 'M-@' select-window -t 2
bind-key -n 'M-#' select-window -t 3
bind-key -n 'M-$' select-window -t 4
bind-key -n 'M-%' select-window -t 5
bind-key -n 'M-^' select-window -t 6
bind-key -n 'M-&' select-window -t 7
bind-key -n 'M-*' select-window -t 8
#bind-key -n 'M-(' select-window -t 9
bind-key -n 'M-(' select-window -t ':$'
bind-key -n 'M-)' select-window -t ':$'

# Moving windows
bind-key -n M-N swap-window -t +1
bind-key -n M-D swap-window -t -1

# Splitting window into panes
# tmux seems to have -h and -v backwards...
bind-key -n M-C-s split-window -v
bind-key -n M-C-v split-window -h

# Pane navigation
bind-key -n M-C-h select-pane -D
bind-key -n M-C-t select-pane -U
bind-key -n M-C-d select-pane -L
bind-key -n M-C-n select-pane -R

# Vertical resizing
bind-key -n M-C-+ resize-pane -U
bind-key -n M-C-- resize-pane -D

# Horizontal resizing
bind-key -n M-C-< resize-pane -L
bind-key -n M-C-> resize-pane -R

set-option -g aggressive-resize on

# Toggle alternate screen.
bind-key -n M-x set-window-option alternate-screen

# vim:foldmethod=marker:foldlevel=0 tw=79 noet
